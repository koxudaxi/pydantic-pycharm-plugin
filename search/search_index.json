{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pydantic PyCharm Plugin \ud83d\udd17 A JetBrains PyCharm plugin for pydantic . Interview \ud83d\udd17 I got interviewed about this plugin for JetBrains' PyCharm Blog . Sponsors \ud83d\udd17 Features \ud83d\udd17 Implemented \ud83d\udd17 pydantic.BaseModel \ud83d\udd17 Model-specific __init__ -signature inspection and autocompletion for subclasses of pydantic.BaseModel Model-specific __init__ -arguments type-checking for subclasses of pydantic.BaseModel Refactor support for renaming fields for subclasses of BaseModel (If the field name is refactored from the model definition or __init__ call keyword arguments, PyCharm will present a dialog offering the choice to automatically rename the keyword where it occurs in a model initialization call.) Search related-fields by class attributes and keyword arguments of __init__ with Ctrl+B and Cmd+B Provide an inspection for type-checking which is compatible with pydantic. the inspection supports parsable-type . the detail is at Inspection for type-checking section Insert unfilled arguments with a QuickFix for subclasses of pydantic.BaseModel Support typing.Annotated (PEP 593) Regex arguments in Field and constr are treated as Python's regex string literals pydantic.generics.GenericModel \ud83d\udd17 Support same features as pydantic.BaseModel (This plugin version 0.3.1 or later) pydantic.dataclasses.dataclass \ud83d\udd17 Support same features as pydantic.BaseModel (After PyCharm 2020.1 and this plugin version 0.1.0, PyCharm treats pydantic.dataclasses.dataclass as third-party dataclass.) Exclude a feature which is inserting unfilled arguments with a QuickFix pydantic.create_model [experimental] \ud83d\udd17 Support minimum features for a model which is created by create_model Demo \ud83d\udd17 Quick Installation \ud83d\udd17 The plugin is in Jetbrains repository ( Pydantic Plugin Page ) You can install the stable version on PyCharm's Marketplace (Preference -> Plugins -> Marketplace) Official Documentation The plugin requires PyCharm 2020.2 or later (include other JetBrains IDEs) Contribute \ud83d\udd17 We are waiting for your contributions to pydantic-pycharm-plugin . Links \ud83d\udd17 JetBrains Plugin Page \ud83d\udd17 Pydantic Plugin Page Motivation \ud83d\udd17 Auto-completion when instantiating BaseModel objects #650 Other PyCharm plugin projects \ud83d\udd17 Poetry PyCharm Plugin This project is currently in an experimental phase \ud83d\udd17","title":"Overview"},{"location":"#pydantic-pycharm-plugin","text":"A JetBrains PyCharm plugin for pydantic .","title":"Pydantic PyCharm Plugin"},{"location":"#interview","text":"I got interviewed about this plugin for JetBrains' PyCharm Blog .","title":"Interview"},{"location":"#sponsors","text":"","title":"Sponsors"},{"location":"#features","text":"","title":"Features"},{"location":"#implemented","text":"","title":"Implemented"},{"location":"#pydanticbasemodel","text":"Model-specific __init__ -signature inspection and autocompletion for subclasses of pydantic.BaseModel Model-specific __init__ -arguments type-checking for subclasses of pydantic.BaseModel Refactor support for renaming fields for subclasses of BaseModel (If the field name is refactored from the model definition or __init__ call keyword arguments, PyCharm will present a dialog offering the choice to automatically rename the keyword where it occurs in a model initialization call.) Search related-fields by class attributes and keyword arguments of __init__ with Ctrl+B and Cmd+B Provide an inspection for type-checking which is compatible with pydantic. the inspection supports parsable-type . the detail is at Inspection for type-checking section Insert unfilled arguments with a QuickFix for subclasses of pydantic.BaseModel Support typing.Annotated (PEP 593) Regex arguments in Field and constr are treated as Python's regex string literals","title":"pydantic.BaseModel"},{"location":"#pydanticgenericsgenericmodel","text":"Support same features as pydantic.BaseModel (This plugin version 0.3.1 or later)","title":"pydantic.generics.GenericModel"},{"location":"#pydanticdataclassesdataclass","text":"Support same features as pydantic.BaseModel (After PyCharm 2020.1 and this plugin version 0.1.0, PyCharm treats pydantic.dataclasses.dataclass as third-party dataclass.) Exclude a feature which is inserting unfilled arguments with a QuickFix","title":"pydantic.dataclasses.dataclass"},{"location":"#pydanticcreate_model-experimental","text":"Support minimum features for a model which is created by create_model","title":"pydantic.create_model [experimental]"},{"location":"#demo","text":"","title":"Demo"},{"location":"#quick-installation","text":"The plugin is in Jetbrains repository ( Pydantic Plugin Page ) You can install the stable version on PyCharm's Marketplace (Preference -> Plugins -> Marketplace) Official Documentation The plugin requires PyCharm 2020.2 or later (include other JetBrains IDEs)","title":"Quick Installation"},{"location":"#contribute","text":"We are waiting for your contributions to pydantic-pycharm-plugin .","title":"Contribute"},{"location":"#links","text":"","title":"Links"},{"location":"#jetbrains-plugin-page","text":"Pydantic Plugin Page","title":"JetBrains Plugin Page"},{"location":"#motivation","text":"Auto-completion when instantiating BaseModel objects #650","title":"Motivation"},{"location":"#other-pycharm-plugin-projects","text":"Poetry PyCharm Plugin","title":"Other PyCharm plugin projects"},{"location":"#this-project-is-currently-in-an-experimental-phase","text":"","title":"This project is currently in an experimental phase"},{"location":"CHANGELOG/","text":"Changelog \ud83d\udd17 [Unreleased] \ud83d\udd17 Features \ud83d\udd17 Support IntelliJ IDEA 2022.1 [ #436 ] BugFixes \ud83d\udd17 Fix Null Pointer Exception in PydanticTypeCheckerInspection [ #431 ] 0.3.10 \ud83d\udd17 Features \ud83d\udd17 Support IntelliJ IDEA 2021.3 [ #407 ] BugFixes \ud83d\udd17 Fix a typo in the settings [ #408 ] 0.3.9 \ud83d\udd17 Features \ud83d\udd17 Support PyCharm 2021.3 [ #400 ] 0.3.8 \ud83d\udd17 Features \ud83d\udd17 - PyCharm API changes [ #350 ] by @alek-sun \ud83d\udd17 Thanks to @alek - sun 0.3.7 \ud83d\udd17 BugFixes \ud83d\udd17 Improve resolving ancestor pydantic models [ #369 ] Fix false positive detection of \"extra fields not permitted\" [ #368 ] 0.3.6 \ud83d\udd17 BugFixes \ud83d\udd17 Fix PydanticDataclassTypeProvider.kt error [ #366 ] Fix Outdated Stub in index error on PydanticAnnotator.kt [ #363 ] Fix NullPointerException in PydanticTypeCheckerInspection.kt [ #362 ] 0.3.5 \ud83d\udd17 Features \ud83d\udd17 Support PyCharm 2021.2 [ #355 ] PyCharm 2021.2.1 API changes [ #345 ] by @lada-gagina \ud83d\udd17 Thanks to @lada-gagina 0.3.4 \ud83d\udd17 Features \ud83d\udd17 Support ignore-init-method-arguments [ #328 ] Support error for extra attribute with extra = 'forbid' option [ #324 ] BugFixes \ud83d\udd17 Fix default value by variable for Field is not recognized [ #323 ] 0.3.3 \ud83d\udd17 BugFixes \ud83d\udd17 Ignore invalid alias name [ #307 ] Fix wrong call parameter with **kwargs [ #306 ] 0.3.2 \ud83d\udd17 BugFixes \ud83d\udd17 Fix wrong call parameters when init is defined [ #298 ] Fix wrong an error for a duplicate in config [ #297 ] 0.3.1 \ud83d\udd17 Features \ud83d\udd17 Improve resolving reference [ #293 ] Improve coding style [ #292 ] Support GenericModel [ #289 ] Support frozen on config [ #288 ] Fix format [ #287 ] Improve handling pydantic version [ #286 ] Support config parameters on class kwargs [ #285 ] 0.3.0 \ud83d\udd17 Features \ud83d\udd17 Support extra init args on baseSetting [ #276 ] Support PyCharm 2021.1 [ #273 ] Improve supporting dynamic model [ #271 ] 0.2.1 \ud83d\udd17 Features \ud83d\udd17 Support regex (Field, constr) [ #262 ] 0.2.0 \ud83d\udd17 BugFixes \ud83d\udd17 Support import typing [ #258 ] Fix DisposalException [ #252 ] Support Annotated [ #241 ] 0.1.20 \ud83d\udd17 Features \ud83d\udd17 Show Field() as parameter info for a default value when set default_factory [ #240 ] 0.1.19 \ud83d\udd17 BugFixes \ud83d\udd17 Fix custom root inspection [ #232 ] 0.1.18 \ud83d\udd17 Features \ud83d\udd17 Support custom root field [ #227 ] 0.1.17 \ud83d\udd17 Features \ud83d\udd17 Support keep_untouched[ #216 ] BugFixes \ud83d\udd17 Fix build warning [ #217 ] 0.1.16 \ud83d\udd17 BugFixes \ud83d\udd17 Fix inserting argument [ #204 ] 0.1.15 \ud83d\udd17 BugFixes \ud83d\udd17 Fix config service error [ #202 ] 0.1.14 \ud83d\udd17 BugFixes \ud83d\udd17 Fix detecting validators decorated methods [ #196 ] Remove stub deletion error [ #190 ] 0.1.13 \ud83d\udd17 Features \ud83d\udd17 Support ClassVar [ #188 ] 0.1.12 \ud83d\udd17 Features \ud83d\udd17 Improve build config [ #180 ] 0.1.11 \ud83d\udd17 Features \ud83d\udd17 Support dynamic model [ #175 ] 0.1.10 \ud83d\udd17 BugFixes \ud83d\udd17 Fix inserting arguments [ #160 ] 0.1.9 \ud83d\udd17 BugFixes \ud83d\udd17 Fix compatibility issues [ #145 ] 0.1.8 \ud83d\udd17 Features \ud83d\udd17 Support inserting arguments [ #144 ] 0.1.7 \ud83d\udd17 Features \ud83d\udd17 Update jvm version [ #133 ] BugFixes \ud83d\udd17 Fix handling project [ #137 ] Fix invalid cache for pydantic version [ #132 ] Fix invalid completion in callable expression [ #130 ] 0.1.6 \ud83d\udd17 Features \ud83d\udd17 Support conlist [ #129 ] Fix acceptable types for collections [ #127 ] Improve initializer and add package manager listener [ #126 ] Fix invalid self parameter when inherits from non-pydantic model [ #125 ] Add mock sdk for unittest [ #124 ] Fix types of methods and functions [ #123 ] 0.1.5 \ud83d\udd17 Features \ud83d\udd17 Support a collection on parsable-type and acceptable-type [ #120 ] BugFixes \ud83d\udd17 Fix an error when project is disposed [ #121 ] Fix type-map edge case for parsable-type and acceptable-type [ #118 ] 0.1.4 \ud83d\udd17 BugFixes \ud83d\udd17 Fix type provider for dataclass [ #114 ] Features \ud83d\udd17 Support mypy.ini [ #110 ] 0.1.3 \ud83d\udd17 Features \ud83d\udd17 Add documents and link to documents [ #105 , #106 , #107 , #108 ] Support acceptable type [ #104 ] Support parsable type highlight level [ #103 ] 0.1.2 \ud83d\udd17 BugFixes \ud83d\udd17 Fix type checker [ #102 ] Fix an invalid warning when a field type is any [ #101 ] Fix plugin build settings [ #100 ] 0.1.1 \ud83d\udd17 Features \ud83d\udd17 Support parsable type [ #96 ] 0.1.0 \ud83d\udd17 Features \ud83d\udd17 PyCharm treats pydantic.dataclasses.dataclass as third-party dataclass. [ #98 ] 0.0.30 \ud83d\udd17 BugFixes \ud83d\udd17 Fix invalid warn on no public attribute [ #95 ] 0.0.29 \ud83d\udd17 Features \ud83d\udd17 Inspect untyped fields [ #93 ] Add config panel [ #92 ] 0.0.28 \ud83d\udd17 Features, BugFixes \ud83d\udd17 Support positional arguments for dataclasses [ #91 ] Fix field names treated with incorrect scope [ #90 ] 0.0.27 \ud83d\udd17 Features \ud83d\udd17 Support to inspect read-only property [ #86 ] 0.0.26 \ud83d\udd17 Features \ud83d\udd17 Support to inspect from_orm [ #85 ] Improve to handle Config [ #85 ] 0.0.25 \ud83d\udd17 Features \ud83d\udd17 Add auto-completion for config fields [ #84 ] Support allow_population_by_field_name [ #82 ] 0.0.24 \ud83d\udd17 BugFixes \ud83d\udd17 Fix inspection on namedtuple [ #81 ] 0.0.23 \ud83d\udd17 Features \ud83d\udd17 Ignore protected and private fields [ #79 ] 0.0.22 \ud83d\udd17 Features, BugFixes \ud83d\udd17 Fix first parameter type of a validator method [ #76 ] Fix auto-completion for Fields [ #75 ] Improve to insert validate methods [ #74 ] 0.0.21 \ud83d\udd17 Features, BugFixes \ud83d\udd17 Support root_validator [ #72 ] Support Field for v1 [ #71 , #73 ] 0.0.20 \ud83d\udd17 Features, BugFixes \ud83d\udd17 Support all features by parameters [ #67 ] Fix to handle models which have init or new methods [ #67 ] 0.0.19 \ud83d\udd17 BugFixes \ud83d\udd17 Fix wrong warning message for cls initialization [ #66 ] 0.0.18 \ud83d\udd17 Features \ud83d\udd17 Support alias on Schema [ #64 ] 0.0.17 \ud83d\udd17 BugFixes \ud83d\udd17 Fix removing fields on non-subclasses of pydantic.BaseModel and pydantic.dataclasses.dataclass [ #62 ] 0.0.16 \ud83d\udd17 Features, BugFixes \ud83d\udd17 Remove fields on auto-completion of subclasses of pydantic.BaseModel and pydantic.dataclasses.dataclass [ #61 ] Change default value \"...\" to None on auto-completion [ #60 ] Add types and default values to popup of auto-completion [ #54 ] Fix class imported path on auto-completion [ #54 ] 0.0.15 \ud83d\udd17 Features \ud83d\udd17 Improve autocompletion for signature subclasses of pydantic.BaseModel and pydantic.dataclasses.dataclass [ #51 ] Update kotlin version to 1.3.50 [ #50 ] Support to detect types by default value on Schema [ #49 ] Improve inner logic [ #47 , #52 ] 0.0.14 \ud83d\udd17 Features \ud83d\udd17 Support default values [ #46 ] Ignore warning for self argument with @validator [ #45 ] Support pydantic.dataclasses.dataclass [ #43 ] Search related-fields by class attributes and keyword arguments of init . with Ctrl+B and Cmd+B [ #42 ] 0.0.13 \ud83d\udd17 Features, BugFixes \ud83d\udd17 Fix to check a type of fields without a type-hint [ #39 ] No arguments required for BaseSettings [ #38 ] 0.0.12 \ud83d\udd17 Features \ud83d\udd17 Support refactoring fields by a keyword argument [ #34 ] Support refactoring super-classes and inheritor-classes [ #34 ] Support ellipsis(...) in fields [ #34 ] Support Schema in fields [ #31 ]","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#unreleased","text":"","title":"[Unreleased]"},{"location":"CHANGELOG/#features","text":"Support IntelliJ IDEA 2022.1 [ #436 ]","title":"Features"},{"location":"CHANGELOG/#bugfixes","text":"Fix Null Pointer Exception in PydanticTypeCheckerInspection [ #431 ]","title":"BugFixes"},{"location":"CHANGELOG/#0310","text":"","title":"0.3.10"},{"location":"CHANGELOG/#features_1","text":"Support IntelliJ IDEA 2021.3 [ #407 ]","title":"Features"},{"location":"CHANGELOG/#bugfixes_1","text":"Fix a typo in the settings [ #408 ]","title":"BugFixes"},{"location":"CHANGELOG/#039","text":"","title":"0.3.9"},{"location":"CHANGELOG/#features_2","text":"Support PyCharm 2021.3 [ #400 ]","title":"Features"},{"location":"CHANGELOG/#038","text":"","title":"0.3.8"},{"location":"CHANGELOG/#features_3","text":"","title":"Features"},{"location":"CHANGELOG/#-pycharm-api-changes-350-by-alek-sun","text":"Thanks to @alek - sun","title":"- PyCharm API changes [#350] by @alek-sun"},{"location":"CHANGELOG/#037","text":"","title":"0.3.7"},{"location":"CHANGELOG/#bugfixes_2","text":"Improve resolving ancestor pydantic models [ #369 ] Fix false positive detection of \"extra fields not permitted\" [ #368 ]","title":"BugFixes"},{"location":"CHANGELOG/#036","text":"","title":"0.3.6"},{"location":"CHANGELOG/#bugfixes_3","text":"Fix PydanticDataclassTypeProvider.kt error [ #366 ] Fix Outdated Stub in index error on PydanticAnnotator.kt [ #363 ] Fix NullPointerException in PydanticTypeCheckerInspection.kt [ #362 ]","title":"BugFixes"},{"location":"CHANGELOG/#035","text":"","title":"0.3.5"},{"location":"CHANGELOG/#features_4","text":"Support PyCharm 2021.2 [ #355 ]","title":"Features"},{"location":"CHANGELOG/#pycharm-202121-api-changes-345-by-lada-gagina","text":"Thanks to @lada-gagina","title":"PyCharm 2021.2.1 API changes [#345] by @lada-gagina"},{"location":"CHANGELOG/#034","text":"","title":"0.3.4"},{"location":"CHANGELOG/#features_5","text":"Support ignore-init-method-arguments [ #328 ] Support error for extra attribute with extra = 'forbid' option [ #324 ]","title":"Features"},{"location":"CHANGELOG/#bugfixes_4","text":"Fix default value by variable for Field is not recognized [ #323 ]","title":"BugFixes"},{"location":"CHANGELOG/#033","text":"","title":"0.3.3"},{"location":"CHANGELOG/#bugfixes_5","text":"Ignore invalid alias name [ #307 ] Fix wrong call parameter with **kwargs [ #306 ]","title":"BugFixes"},{"location":"CHANGELOG/#032","text":"","title":"0.3.2"},{"location":"CHANGELOG/#bugfixes_6","text":"Fix wrong call parameters when init is defined [ #298 ] Fix wrong an error for a duplicate in config [ #297 ]","title":"BugFixes"},{"location":"CHANGELOG/#031","text":"","title":"0.3.1"},{"location":"CHANGELOG/#features_6","text":"Improve resolving reference [ #293 ] Improve coding style [ #292 ] Support GenericModel [ #289 ] Support frozen on config [ #288 ] Fix format [ #287 ] Improve handling pydantic version [ #286 ] Support config parameters on class kwargs [ #285 ]","title":"Features"},{"location":"CHANGELOG/#030","text":"","title":"0.3.0"},{"location":"CHANGELOG/#features_7","text":"Support extra init args on baseSetting [ #276 ] Support PyCharm 2021.1 [ #273 ] Improve supporting dynamic model [ #271 ]","title":"Features"},{"location":"CHANGELOG/#021","text":"","title":"0.2.1"},{"location":"CHANGELOG/#features_8","text":"Support regex (Field, constr) [ #262 ]","title":"Features"},{"location":"CHANGELOG/#020","text":"","title":"0.2.0"},{"location":"CHANGELOG/#bugfixes_7","text":"Support import typing [ #258 ] Fix DisposalException [ #252 ] Support Annotated [ #241 ]","title":"BugFixes"},{"location":"CHANGELOG/#0120","text":"","title":"0.1.20"},{"location":"CHANGELOG/#features_9","text":"Show Field() as parameter info for a default value when set default_factory [ #240 ]","title":"Features"},{"location":"CHANGELOG/#0119","text":"","title":"0.1.19"},{"location":"CHANGELOG/#bugfixes_8","text":"Fix custom root inspection [ #232 ]","title":"BugFixes"},{"location":"CHANGELOG/#0118","text":"","title":"0.1.18"},{"location":"CHANGELOG/#features_10","text":"Support custom root field [ #227 ]","title":"Features"},{"location":"CHANGELOG/#0117","text":"","title":"0.1.17"},{"location":"CHANGELOG/#features_11","text":"Support keep_untouched[ #216 ]","title":"Features"},{"location":"CHANGELOG/#bugfixes_9","text":"Fix build warning [ #217 ]","title":"BugFixes"},{"location":"CHANGELOG/#0116","text":"","title":"0.1.16"},{"location":"CHANGELOG/#bugfixes_10","text":"Fix inserting argument [ #204 ]","title":"BugFixes"},{"location":"CHANGELOG/#0115","text":"","title":"0.1.15"},{"location":"CHANGELOG/#bugfixes_11","text":"Fix config service error [ #202 ]","title":"BugFixes"},{"location":"CHANGELOG/#0114","text":"","title":"0.1.14"},{"location":"CHANGELOG/#bugfixes_12","text":"Fix detecting validators decorated methods [ #196 ] Remove stub deletion error [ #190 ]","title":"BugFixes"},{"location":"CHANGELOG/#0113","text":"","title":"0.1.13"},{"location":"CHANGELOG/#features_12","text":"Support ClassVar [ #188 ]","title":"Features"},{"location":"CHANGELOG/#0112","text":"","title":"0.1.12"},{"location":"CHANGELOG/#features_13","text":"Improve build config [ #180 ]","title":"Features"},{"location":"CHANGELOG/#0111","text":"","title":"0.1.11"},{"location":"CHANGELOG/#features_14","text":"Support dynamic model [ #175 ]","title":"Features"},{"location":"CHANGELOG/#0110","text":"","title":"0.1.10"},{"location":"CHANGELOG/#bugfixes_13","text":"Fix inserting arguments [ #160 ]","title":"BugFixes"},{"location":"CHANGELOG/#019","text":"","title":"0.1.9"},{"location":"CHANGELOG/#bugfixes_14","text":"Fix compatibility issues [ #145 ]","title":"BugFixes"},{"location":"CHANGELOG/#018","text":"","title":"0.1.8"},{"location":"CHANGELOG/#features_15","text":"Support inserting arguments [ #144 ]","title":"Features"},{"location":"CHANGELOG/#017","text":"","title":"0.1.7"},{"location":"CHANGELOG/#features_16","text":"Update jvm version [ #133 ]","title":"Features"},{"location":"CHANGELOG/#bugfixes_15","text":"Fix handling project [ #137 ] Fix invalid cache for pydantic version [ #132 ] Fix invalid completion in callable expression [ #130 ]","title":"BugFixes"},{"location":"CHANGELOG/#016","text":"","title":"0.1.6"},{"location":"CHANGELOG/#features_17","text":"Support conlist [ #129 ] Fix acceptable types for collections [ #127 ] Improve initializer and add package manager listener [ #126 ] Fix invalid self parameter when inherits from non-pydantic model [ #125 ] Add mock sdk for unittest [ #124 ] Fix types of methods and functions [ #123 ]","title":"Features"},{"location":"CHANGELOG/#015","text":"","title":"0.1.5"},{"location":"CHANGELOG/#features_18","text":"Support a collection on parsable-type and acceptable-type [ #120 ]","title":"Features"},{"location":"CHANGELOG/#bugfixes_16","text":"Fix an error when project is disposed [ #121 ] Fix type-map edge case for parsable-type and acceptable-type [ #118 ]","title":"BugFixes"},{"location":"CHANGELOG/#014","text":"","title":"0.1.4"},{"location":"CHANGELOG/#bugfixes_17","text":"Fix type provider for dataclass [ #114 ]","title":"BugFixes"},{"location":"CHANGELOG/#features_19","text":"Support mypy.ini [ #110 ]","title":"Features"},{"location":"CHANGELOG/#013","text":"","title":"0.1.3"},{"location":"CHANGELOG/#features_20","text":"Add documents and link to documents [ #105 , #106 , #107 , #108 ] Support acceptable type [ #104 ] Support parsable type highlight level [ #103 ]","title":"Features"},{"location":"CHANGELOG/#012","text":"","title":"0.1.2"},{"location":"CHANGELOG/#bugfixes_18","text":"Fix type checker [ #102 ] Fix an invalid warning when a field type is any [ #101 ] Fix plugin build settings [ #100 ]","title":"BugFixes"},{"location":"CHANGELOG/#011","text":"","title":"0.1.1"},{"location":"CHANGELOG/#features_21","text":"Support parsable type [ #96 ]","title":"Features"},{"location":"CHANGELOG/#010","text":"","title":"0.1.0"},{"location":"CHANGELOG/#features_22","text":"PyCharm treats pydantic.dataclasses.dataclass as third-party dataclass. [ #98 ]","title":"Features"},{"location":"CHANGELOG/#0030","text":"","title":"0.0.30"},{"location":"CHANGELOG/#bugfixes_19","text":"Fix invalid warn on no public attribute [ #95 ]","title":"BugFixes"},{"location":"CHANGELOG/#0029","text":"","title":"0.0.29"},{"location":"CHANGELOG/#features_23","text":"Inspect untyped fields [ #93 ] Add config panel [ #92 ]","title":"Features"},{"location":"CHANGELOG/#0028","text":"","title":"0.0.28"},{"location":"CHANGELOG/#features-bugfixes","text":"Support positional arguments for dataclasses [ #91 ] Fix field names treated with incorrect scope [ #90 ]","title":"Features, BugFixes"},{"location":"CHANGELOG/#0027","text":"","title":"0.0.27"},{"location":"CHANGELOG/#features_24","text":"Support to inspect read-only property [ #86 ]","title":"Features"},{"location":"CHANGELOG/#0026","text":"","title":"0.0.26"},{"location":"CHANGELOG/#features_25","text":"Support to inspect from_orm [ #85 ] Improve to handle Config [ #85 ]","title":"Features"},{"location":"CHANGELOG/#0025","text":"","title":"0.0.25"},{"location":"CHANGELOG/#features_26","text":"Add auto-completion for config fields [ #84 ] Support allow_population_by_field_name [ #82 ]","title":"Features"},{"location":"CHANGELOG/#0024","text":"","title":"0.0.24"},{"location":"CHANGELOG/#bugfixes_20","text":"Fix inspection on namedtuple [ #81 ]","title":"BugFixes"},{"location":"CHANGELOG/#0023","text":"","title":"0.0.23"},{"location":"CHANGELOG/#features_27","text":"Ignore protected and private fields [ #79 ]","title":"Features"},{"location":"CHANGELOG/#0022","text":"","title":"0.0.22"},{"location":"CHANGELOG/#features-bugfixes_1","text":"Fix first parameter type of a validator method [ #76 ] Fix auto-completion for Fields [ #75 ] Improve to insert validate methods [ #74 ]","title":"Features, BugFixes"},{"location":"CHANGELOG/#0021","text":"","title":"0.0.21"},{"location":"CHANGELOG/#features-bugfixes_2","text":"Support root_validator [ #72 ] Support Field for v1 [ #71 , #73 ]","title":"Features, BugFixes"},{"location":"CHANGELOG/#0020","text":"","title":"0.0.20"},{"location":"CHANGELOG/#features-bugfixes_3","text":"Support all features by parameters [ #67 ] Fix to handle models which have init or new methods [ #67 ]","title":"Features, BugFixes"},{"location":"CHANGELOG/#0019","text":"","title":"0.0.19"},{"location":"CHANGELOG/#bugfixes_21","text":"Fix wrong warning message for cls initialization [ #66 ]","title":"BugFixes"},{"location":"CHANGELOG/#0018","text":"","title":"0.0.18"},{"location":"CHANGELOG/#features_28","text":"Support alias on Schema [ #64 ]","title":"Features"},{"location":"CHANGELOG/#0017","text":"","title":"0.0.17"},{"location":"CHANGELOG/#bugfixes_22","text":"Fix removing fields on non-subclasses of pydantic.BaseModel and pydantic.dataclasses.dataclass [ #62 ]","title":"BugFixes"},{"location":"CHANGELOG/#0016","text":"","title":"0.0.16"},{"location":"CHANGELOG/#features-bugfixes_4","text":"Remove fields on auto-completion of subclasses of pydantic.BaseModel and pydantic.dataclasses.dataclass [ #61 ] Change default value \"...\" to None on auto-completion [ #60 ] Add types and default values to popup of auto-completion [ #54 ] Fix class imported path on auto-completion [ #54 ]","title":"Features, BugFixes"},{"location":"CHANGELOG/#0015","text":"","title":"0.0.15"},{"location":"CHANGELOG/#features_29","text":"Improve autocompletion for signature subclasses of pydantic.BaseModel and pydantic.dataclasses.dataclass [ #51 ] Update kotlin version to 1.3.50 [ #50 ] Support to detect types by default value on Schema [ #49 ] Improve inner logic [ #47 , #52 ]","title":"Features"},{"location":"CHANGELOG/#0014","text":"","title":"0.0.14"},{"location":"CHANGELOG/#features_30","text":"Support default values [ #46 ] Ignore warning for self argument with @validator [ #45 ] Support pydantic.dataclasses.dataclass [ #43 ] Search related-fields by class attributes and keyword arguments of init . with Ctrl+B and Cmd+B [ #42 ]","title":"Features"},{"location":"CHANGELOG/#0013","text":"","title":"0.0.13"},{"location":"CHANGELOG/#features-bugfixes_5","text":"Fix to check a type of fields without a type-hint [ #39 ] No arguments required for BaseSettings [ #38 ]","title":"Features, BugFixes"},{"location":"CHANGELOG/#0012","text":"","title":"0.0.12"},{"location":"CHANGELOG/#features_31","text":"Support refactoring fields by a keyword argument [ #34 ] Support refactoring super-classes and inheritor-classes [ #34 ] Support ellipsis(...) in fields [ #34 ] Support Schema in fields [ #31 ]","title":"Features"},{"location":"development/","text":"Development \ud83d\udd17 Building the plugin \ud83d\udd17 You can build and run the plugin either via the command line or through IntelliJ IDEA: Shell on Linux, macOS and PowerShell \ud83d\udd17 ./gradlew buildPlugin Command Prompt on Windows \ud83d\udd17 gradlew buildPlugin JetBrains IDE on any platform \ud83d\udd17 Official documentation Running the IDE with the built plugin \ud83d\udd17 ./gradlew runIde License For testSrc/com/jetbrains \ud83d\udd17 These files are copied to testSrc/com/jetbrains from IntelliJ IDEA Community Edition The files are licensed under the Apache License, Version 2.0. http://www.apache.org/licenses/LICENSE-2.0","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#building-the-plugin","text":"You can build and run the plugin either via the command line or through IntelliJ IDEA:","title":"Building the plugin"},{"location":"development/#shell-on-linux-macos-and-powershell","text":"./gradlew buildPlugin","title":"Shell on Linux, macOS and PowerShell"},{"location":"development/#command-prompt-on-windows","text":"gradlew buildPlugin","title":"Command Prompt on Windows"},{"location":"development/#jetbrains-ide-on-any-platform","text":"Official documentation","title":"JetBrains IDE on any platform"},{"location":"development/#running-the-ide-with-the-built-plugin","text":"./gradlew runIde","title":"Running the IDE with the built plugin"},{"location":"development/#license-for-testsrccomjetbrains","text":"These files are copied to testSrc/com/jetbrains from IntelliJ IDEA Community Edition The files are licensed under the Apache License, Version 2.0. http://www.apache.org/licenses/LICENSE-2.0","title":"License For testSrc/com/jetbrains"},{"location":"ignore-init-arguments/","text":"Ignore __init__ method arguments \ud83d\udd17 Info This feature is in version 0.3.4 or later You can write __init__ method on a model for adding some logic. However, default arguments on __init__ method will be overridden, And you will lose autocompletion for __init__ methods by the plugin. ignore-init-method-arguments option resolves this problem. The option ignore arguments on __init__ method. The option has to be defined in pyproject.toml [tool.pydantic-pycharm-plugin] ignore-init-method-arguments = true","title":"Ignore __init__ arguments"},{"location":"ignore-init-arguments/#ignore-__init__-method-arguments","text":"Info This feature is in version 0.3.4 or later You can write __init__ method on a model for adding some logic. However, default arguments on __init__ method will be overridden, And you will lose autocompletion for __init__ methods by the plugin. ignore-init-method-arguments option resolves this problem. The option ignore arguments on __init__ method. The option has to be defined in pyproject.toml [tool.pydantic-pycharm-plugin] ignore-init-method-arguments = true","title":"Ignore __init__ method arguments"},{"location":"install/","text":"Installation \ud83d\udd17 The plugin requires PyCharm 2020.2 or later (include other JetBrains IDEs) MarketPlace \ud83d\udd17 The plugin is in Jetbrains repository ( Pydantic Plugin Page ) You can install the stable version on PyCharm's Marketplace (Preference -> Plugins -> Marketplace) Official Documentation Complied binary \ud83d\udd17 The 'Releases' section of this repository contains a compiled version of the plugin: pydantic-pycharm-plugin.zip(latest) After downloading this file, you can install the plugin from disk by following the JetBrains instructions here . Source \ud83d\udd17 Alternatively, you can clone this repository and follow the instructions under the \"Building the plugin\" heading below to build from source. The build process will create the file build/distributions/pydantic-pycharm-plugin.zip . This file can be installed as a PyCharm plugin from disk following the same instructions.","title":"Install"},{"location":"install/#installation","text":"The plugin requires PyCharm 2020.2 or later (include other JetBrains IDEs)","title":"Installation"},{"location":"install/#marketplace","text":"The plugin is in Jetbrains repository ( Pydantic Plugin Page ) You can install the stable version on PyCharm's Marketplace (Preference -> Plugins -> Marketplace) Official Documentation","title":"MarketPlace"},{"location":"install/#complied-binary","text":"The 'Releases' section of this repository contains a compiled version of the plugin: pydantic-pycharm-plugin.zip(latest) After downloading this file, you can install the plugin from disk by following the JetBrains instructions here .","title":"Complied binary"},{"location":"install/#source","text":"Alternatively, you can clone this repository and follow the instructions under the \"Building the plugin\" heading below to build from source. The build process will create the file build/distributions/pydantic-pycharm-plugin.zip . This file can be installed as a PyCharm plugin from disk following the same instructions.","title":"Source"},{"location":"mypy-compatible/","text":"Mypy Compatible \ud83d\udd17 Info This feature is in version 0.1.4 or later This plugin is compatible with the pydantic-mypy plugin , which is included in pydantic package. If you set supported features in mypy.ini then, the pycharm plugin performs the same inspects. Support features \ud83d\udd17 init_typed warn_untyped_fields init_typed \ud83d\udd17 If enabled, include the field types as type hints in the generated signature for the init method. This means that you'll get errors if you pass an argument that is not already the right type to init , even if parsing could safely convert the type. warn_untyped_fields \ud83d\udd17 If enabled, raise an error whenever a field is declared on a model without explicitly specifying its type. Settings \ud83d\udd17 You can toggle these features in PyCharm's Settings. Tips If there is mypy.ini in your project, this plugin use values in mypy.ini","title":"Mypy compatible"},{"location":"mypy-compatible/#mypy-compatible","text":"Info This feature is in version 0.1.4 or later This plugin is compatible with the pydantic-mypy plugin , which is included in pydantic package. If you set supported features in mypy.ini then, the pycharm plugin performs the same inspects.","title":"Mypy Compatible"},{"location":"mypy-compatible/#support-features","text":"init_typed warn_untyped_fields","title":"Support features"},{"location":"mypy-compatible/#init_typed","text":"If enabled, include the field types as type hints in the generated signature for the init method. This means that you'll get errors if you pass an argument that is not already the right type to init , even if parsing could safely convert the type.","title":"init_typed"},{"location":"mypy-compatible/#warn_untyped_fields","text":"If enabled, raise an error whenever a field is declared on a model without explicitly specifying its type.","title":"warn_untyped_fields"},{"location":"mypy-compatible/#settings","text":"You can toggle these features in PyCharm's Settings. Tips If there is mypy.ini in your project, this plugin use values in mypy.ini","title":"Settings"},{"location":"type-checker-for-pydantic/","text":"Type checker for Pydnatic \ud83d\udd17 Warning Experimental feature Info In version 0.1.1, This feature is broken. Please use it in 0.1.2 or later. Tips This plugin supports type-checking to pydantic with a built-in type checker. Plus, this type-checker supplies a special feature to Pydnatic. This plugin provides a type-checker for pydantic. You can use the type-checker on PyCharm's Settings (Preference -> Editor -> Inspections -> Type checker compatible with Pydantic ) This type-checker inherits from PyCharm's built-in type checker (aka Type checker ). Please disable Type checker when you enable Type checker compatible with Pydantic. Don't use this type checker with a builtin type checker same time. Parsable Type \ud83d\udd17 Pydantic has lots of support for coercing types. However, PyCharm gives a message saying only Expected type \"x,\" got \"y\" instead: When you set parsable-type on a type, then the message will be changed to Field is of type \"x\", \"y\" may not be parsable to \"x\" Set parsable-type in pyproject.toml \ud83d\udd17 You should create pyproject.toml in your project root. And, you define parsable-type like a example. exapmle: pyproject.toml [tool.pydantic-pycharm-plugin.parsable-types] # str field may parse int and float str = [ \"int\" , \"float\" ] # datetime.datetime field may parse int \"datetime.datetime\" = [ \"int\" ] # your_module.your_type field may parse str \"your_module.your_type\" = [ \"str\" ] [tool.pydantic-pycharm-plugin] # You can set higlith level (default is \"warning\") # You can select it from \"warning\", \"weak_warning\", \"disable\" parsable-type-highlight = \"warning\" ## If you set acceptable-type-highlight then, you have to set it at same depth. acceptable-type-highlight = \"disable\" Acceptable Type \ud83d\udd17 Info This feature is in version 0.1.3 or later. Pydantic can always parse a few types to other types. For example, int to str . It always succeeds. You can set it as an acceptable type. The message is Field is of type 'x', 'y' is set as an acceptable type in pyproject.toml . Also,You may want to disable the message.You can do it, by setting \"disable\" on acceptable-type-highlight . Set acceptable-type in pyproject.toml \ud83d\udd17 You should create pyproject.toml in your project root. And, you define acceptable-type like a example. exapmle: pyproject.toml [tool.pydantic-pycharm-plugin.acceptable-types] # str field accepts to parse int and float str = [ \"int\" , \"float\" ] # datetime.datetime field may parse int \"datetime.datetime\" = [ \"int\" ] [tool.pydantic-pycharm-plugin] # You can set higlith level (default is \"weak_warning\") # You can select it from \"warning\", \"weak_warning\", \"disable\" acceptable-type-highlight = \"disable\" # If you set parsable-type-highlight then, you have to set it at same depth. parsable-type-highlight = \"warning\"","title":"Type checker for pydantic"},{"location":"type-checker-for-pydantic/#type-checker-for-pydnatic","text":"Warning Experimental feature Info In version 0.1.1, This feature is broken. Please use it in 0.1.2 or later. Tips This plugin supports type-checking to pydantic with a built-in type checker. Plus, this type-checker supplies a special feature to Pydnatic. This plugin provides a type-checker for pydantic. You can use the type-checker on PyCharm's Settings (Preference -> Editor -> Inspections -> Type checker compatible with Pydantic ) This type-checker inherits from PyCharm's built-in type checker (aka Type checker ). Please disable Type checker when you enable Type checker compatible with Pydantic. Don't use this type checker with a builtin type checker same time.","title":"Type checker for Pydnatic"},{"location":"type-checker-for-pydantic/#parsable-type","text":"Pydantic has lots of support for coercing types. However, PyCharm gives a message saying only Expected type \"x,\" got \"y\" instead: When you set parsable-type on a type, then the message will be changed to Field is of type \"x\", \"y\" may not be parsable to \"x\"","title":"Parsable Type"},{"location":"type-checker-for-pydantic/#set-parsable-type-in-pyprojecttoml","text":"You should create pyproject.toml in your project root. And, you define parsable-type like a example. exapmle: pyproject.toml [tool.pydantic-pycharm-plugin.parsable-types] # str field may parse int and float str = [ \"int\" , \"float\" ] # datetime.datetime field may parse int \"datetime.datetime\" = [ \"int\" ] # your_module.your_type field may parse str \"your_module.your_type\" = [ \"str\" ] [tool.pydantic-pycharm-plugin] # You can set higlith level (default is \"warning\") # You can select it from \"warning\", \"weak_warning\", \"disable\" parsable-type-highlight = \"warning\" ## If you set acceptable-type-highlight then, you have to set it at same depth. acceptable-type-highlight = \"disable\"","title":"Set parsable-type in pyproject.toml"},{"location":"type-checker-for-pydantic/#acceptable-type","text":"Info This feature is in version 0.1.3 or later. Pydantic can always parse a few types to other types. For example, int to str . It always succeeds. You can set it as an acceptable type. The message is Field is of type 'x', 'y' is set as an acceptable type in pyproject.toml . Also,You may want to disable the message.You can do it, by setting \"disable\" on acceptable-type-highlight .","title":"Acceptable Type"},{"location":"type-checker-for-pydantic/#set-acceptable-type-in-pyprojecttoml","text":"You should create pyproject.toml in your project root. And, you define acceptable-type like a example. exapmle: pyproject.toml [tool.pydantic-pycharm-plugin.acceptable-types] # str field accepts to parse int and float str = [ \"int\" , \"float\" ] # datetime.datetime field may parse int \"datetime.datetime\" = [ \"int\" ] [tool.pydantic-pycharm-plugin] # You can set higlith level (default is \"weak_warning\") # You can select it from \"warning\", \"weak_warning\", \"disable\" acceptable-type-highlight = \"disable\" # If you set parsable-type-highlight then, you have to set it at same depth. parsable-type-highlight = \"warning\"","title":"Set acceptable-type in pyproject.toml"}]}
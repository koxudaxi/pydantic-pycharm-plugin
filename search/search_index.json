{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pydantic PyCharm Plugin","text":"<p>A JetBrains PyCharm plugin for <code>pydantic</code>.</p>"},{"location":"#interview","title":"Interview","text":"<p>I got interviewed about this plugin for JetBrains' PyCharm Blog.</p>"},{"location":"#sponsors","title":"Sponsors","text":""},{"location":"#features","title":"Features","text":""},{"location":"#implemented","title":"Implemented","text":""},{"location":"#pydanticbasemodel","title":"pydantic.BaseModel","text":"<ul> <li>Model-specific <code>__init__</code>-signature inspection and autocompletion for subclasses of <code>pydantic.BaseModel</code></li> <li>Model-specific <code>__init__</code>-arguments type-checking for subclasses of <code>pydantic.BaseModel</code> </li> <li>Refactor support for renaming fields for subclasses of <code>BaseModel</code></li> <li>(If the field name is refactored from the model definition or <code>__init__</code> call keyword arguments, PyCharm will present a dialog offering the choice to automatically rename the keyword where it occurs in a model initialization call.)</li> <li>Search related-fields by class attributes and keyword arguments of <code>__init__</code> with <code>Ctrl+B</code> and <code>Cmd+B</code></li> <li>Provide an inspection for type-checking which is compatible with pydantic. the inspection supports <code>parsable-type</code>. the detail is at Inspection for type-checking section</li> <li>Insert unfilled arguments with a QuickFix for subclasses of <code>pydantic.BaseModel</code></li> <li>Support typing.Annotated (PEP 593)</li> <li>Regex arguments in <code>Field</code> and <code>constr</code> are treated as Python's regex string literals</li> <li>Config/ConfigDict support</li> <li>Auto-completion for Config/ConfigDict</li> <li>Read Model config such <code>frozen=True</code> from Config/ConfigDict</li> <li>validator/field_validator support</li> <li>respect first argument is <code>cls</code> of the method</li> <li>Auto-completion for field name arguments of validator/field_validator</li> <li>Associate validator/field_validator with field<ul> <li>Support refactoring/jumping</li> <li>Validate field name on validator arguments</li> </ul> </li> </ul>"},{"location":"#pydanticgenericsgenericmodel","title":"pydantic.generics.GenericModel","text":"<ul> <li>Support same features as <code>pydantic.BaseModel</code></li> <li>(This plugin version 0.3.1 or later)</li> </ul>"},{"location":"#pydanticdataclassesdataclass","title":"pydantic.dataclasses.dataclass","text":"<ul> <li>Support same features as <code>pydantic.BaseModel</code></li> <li>(After PyCharm 2020.1 and this plugin version 0.1.0, PyCharm treats <code>pydantic.dataclasses.dataclass</code> as third-party dataclass.)</li> </ul>"},{"location":"#pydanticcreate_model-experimental","title":"pydantic.create_model [experimental]","text":"<ul> <li>Support minimum features for a model which is created by create_model  </li> </ul>"},{"location":"#sqlmodelsqlmodel","title":"sqlmodel.SQLModel","text":"<ul> <li>Support same features as <code>pydantic.BaseModel</code></li> <li>(This plugin version 0.3.12 or later)</li> </ul>"},{"location":"#supported-pydantic-major-versions","title":"Supported Pydantic major versions","text":"<ul> <li>v0</li> <li>v1</li> <li>v2</li> </ul>"},{"location":"#demo","title":"Demo","text":""},{"location":"#quick-installation","title":"Quick Installation","text":"<p>The plugin is in Jetbrains repository (Pydantic Plugin Page)</p> <p>You can install the stable version on PyCharm's <code>Marketplace</code> (Preference -&gt; Plugins -&gt; Marketplace) Official Documentation</p> <p>The plugin requires PyCharm 2020.2 or later (include other JetBrains IDEs)</p> <p></p>"},{"location":"#contribute","title":"Contribute","text":"<p>We are waiting for your contributions to <code>pydantic-pycharm-plugin</code>.</p>"},{"location":"#links","title":"Links","text":""},{"location":"#jetbrains-plugin-page","title":"JetBrains Plugin Page","text":"<p>Pydantic Plugin Page</p>"},{"location":"#motivation","title":"Motivation","text":"<p>Auto-completion when instantiating BaseModel objects #650</p>"},{"location":"#other-pycharm-plugin-projects","title":"Other PyCharm plugin projects","text":"<p>Poetry PyCharm Plugin</p>"},{"location":"#this-project-is-currently-in-an-experimental-phase","title":"This project is currently in an experimental phase","text":""},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"CHANGELOG/#0419-2025-08-10","title":"0.4.19 - 2025-08-10","text":"<ul> <li>changes to accomodate 2025.2 [#1066]</li> </ul>"},{"location":"CHANGELOG/#0418-2025-05-03","title":"0.4.18 - 2025-05-03","text":"<ul> <li>Fix minimum IDE version requirement [#1060]</li> </ul>"},{"location":"CHANGELOG/#0417-2025-05-02","title":"0.4.17 - 2025-05-02","text":"<ul> <li>add support Final [#1054]</li> <li>feat: support PyCharm/IDEA 2025.1 [#1055]</li> </ul>"},{"location":"CHANGELOG/#0416-2024-11-10","title":"0.4.16 - 2024-11-10","text":"<ul> <li>Support 243-EAP [#1017]</li> </ul>"},{"location":"CHANGELOG/#0415-2024-09-03","title":"0.4.15 - 2024-09-03","text":"<ul> <li>Resolve plugin crash in PyCharm Community Edition after 2024.2 update [#981]</li> </ul>"},{"location":"CHANGELOG/#0414-2024-07-24","title":"0.4.14 - 2024-07-24","text":"<ul> <li>Support 242 EAP[#962]</li> </ul>"},{"location":"CHANGELOG/#0413-2024-04-15","title":"0.4.13 - 2024-04-15","text":"<ul> <li>Fix unresolved ClassVar attribute error [#919]</li> </ul>"},{"location":"CHANGELOG/#0412-2024-03-14","title":"0.4.12 - 2024-03-14","text":"<ul> <li>Skip multi resolve item when is in dumb mode [#885]</li> <li>Fix <code>@model_validator(mode=\"before\")</code> causes \"Problematic nesting of decorators\" inspection false positive [#882]</li> <li>Support 241 EAP [#879]</li> <li>Inspect undefined field [#858]</li> </ul>"},{"location":"CHANGELOG/#0411-2024-01-12","title":"0.4.11 - 2024-01-12","text":"<ul> <li>Improve annotated default detection for v2 [#857]</li> <li>Improve annotated default detection [#856]</li> <li>Fix named argument as positional in popup [#855]</li> <li>(\ud83c\udf81) Add icon [#849]</li> </ul>"},{"location":"CHANGELOG/#0410-2023-12-07","title":"0.4.10 - 2023-12-07","text":"<ul> <li>Support PyCharm 2023.3 [#840]</li> </ul>"},{"location":"CHANGELOG/#049-2023-10-12","title":"0.4.9 - 2023-10-12","text":"<ul> <li>Fix False positive for non-decorator use of validator [#818]</li> <li>Support 2023.3 EAP [#813]</li> </ul>"},{"location":"CHANGELOG/#048-2023-09-14","title":"0.4.8 - 2023-09-14","text":"<ul> <li>Improve RootModel inspection [#783]</li> <li>Fix populate_by_name [#779]</li> <li>Ignore <code>__init__</code> method if parameter is only only <code>**kwargs</code> arguments. [#798]</li> <li>Fixed problem refactoring unrelated fields [#800]</li> </ul>"},{"location":"CHANGELOG/#047-2023-08-07","title":"0.4.7 - 2023-08-07","text":"<ul> <li>Fix false positive \"root cannot be mixed with other fields\" -- ty\u2026 [#780]</li> <li>treat model validator as an instance method when mode='after' [#779]</li> <li>Fix NullPointerException of getExternalDocumentationUrl [#778]</li> <li>Fix false positive validator asterisk [#777]</li> </ul>"},{"location":"CHANGELOG/#046-232-2023-07-20","title":"0.4.6-232 - 2023-07-20","text":"<ul> <li>Associating fields with validator fields for 232 [#762]</li> <li>Add validator field argument completion for 232 [#758]</li> </ul>"},{"location":"CHANGELOG/#045-232-2023-07-17","title":"0.4.5-232 - 2023-07-17","text":"<ul> <li>Add migration guide url for 232 [#752]</li> <li>Update v2 external document url for 232 [#749]</li> <li>Support ConfigDict for 232 [#747]</li> </ul>"},{"location":"CHANGELOG/#044-232-2023-07-14","title":"0.4.4-232 - 2023-07-14","text":"<ul> <li>Support pydantic v2 validators for 232 [#737]</li> </ul>"},{"location":"CHANGELOG/#043-232-2023-06-26","title":"0.4.3-232 - 2023-06-26","text":"<ul> <li>Support Kotlin 1.8.20 [#719]</li> <li>Update build.yml [#724]</li> <li>Support 232 EAP [#717]</li> <li>Add error message for root model in v2 [#696]</li> <li>Add official document link [#697]</li> </ul>"},{"location":"CHANGELOG/#043-2023-06-26","title":"0.4.3 - 2023-06-26","text":"<ul> <li>Add error message for root model in v2 [#696]</li> <li>Add official document link [#697]</li> </ul>"},{"location":"CHANGELOG/#042-231-2023-03-22","title":"0.4.2-231 - 2023-03-22","text":"<ul> <li>Bump version to 0.4.2-231 [#686]</li> <li>Fix wrong accepts only keyword arguments error [#671]</li> <li> <p>Support # noqa [#680]</p> </li> <li> <p>Fix wrong renaming of a local variable name is same as field name [#681]</p> </li> <li>Fix wrong highlighting [#682]</li> </ul>"},{"location":"CHANGELOG/#042-2023-03-21","title":"0.4.2 - 2023-03-21","text":"<ul> <li>Fix wrong accepts only keyword arguments error [#671]</li> <li> <p>Support # noqa [#680]</p> </li> <li> <p>Fix wrong renaming of a local variable name is same as field name [#681]</p> </li> <li>Fix wrong highlighting [#682]</li> </ul>"},{"location":"CHANGELOG/#041-231-2023-03-02","title":"0.4.1-231 - 2023-03-02","text":"<ul> <li>Support 2023.1 EAP [#633]</li> </ul>"},{"location":"CHANGELOG/#040-2023-03-02","title":"0.4.0 - 2023-03-02","text":"<ul> <li>Fix wrong inspections when a model has a call method [#655]</li> <li>Reduce unnecessary resolve in type providers [#656]</li> <li>Optimize resolving pydantic class [#658]</li> <li>Improve dynamic model field detection [#659]</li> <li>Improve test coverage [#660]</li> <li>Use multiResolveCalleeFunction instead of getResolvedPsiElements [#661]</li> </ul>"},{"location":"CHANGELOG/#0317-2022-12-16","title":"0.3.17 - 2022-12-16","text":"<ul> <li>Support Union operator [#602]</li> <li>Ignore forbid for double star arguments [#603]</li> <li>Improve dataclass default Value detection [#604]</li> <li>Add inspection for default factory [#605]</li> <li>Improve insert arguments [#607]</li> <li>Fix None default value on Field function[#608]</li> <li>Improve dataclass support [#609]</li> </ul>"},{"location":"CHANGELOG/#0316-2022-12-09","title":"0.3.16 - 2022-12-09","text":"<ul> <li>avoid AlreadyDisposedException [#585]</li> <li>Fix kotlin jvm target option [#586]</li> <li>Improve code style [#587]</li> <li>Prevent Recursion problem [#594]</li> <li>Improve version management [#595]</li> <li>Fix completion adds superfluous equal to field_name [#596]</li> </ul>"},{"location":"CHANGELOG/#0315","title":"0.3.15","text":"<ul> <li>Fix NotFound getDataclassParameters error [#573]</li> </ul>"},{"location":"CHANGELOG/#0314","title":"0.3.14","text":"<ul> <li>Support IntelliJ IDEA 2022.3 [#519]</li> </ul>"},{"location":"CHANGELOG/#0313","title":"0.3.13","text":""},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li>Support IntelliJ IDEA 2022.2.2 [#517]</li> </ul>"},{"location":"CHANGELOG/#0312","title":"0.3.12","text":""},{"location":"CHANGELOG/#features_1","title":"Features","text":"<ul> <li>Support SQLModel [#450]</li> </ul>"},{"location":"CHANGELOG/#0311","title":"0.3.11","text":""},{"location":"CHANGELOG/#features_2","title":"Features","text":"<ul> <li>Support IntelliJ IDEA 2022.1 [#436]</li> </ul>"},{"location":"CHANGELOG/#bugfixes","title":"BugFixes","text":"<ul> <li>Fix Null Pointer Exception in PydanticTypeCheckerInspection [#431]</li> </ul>"},{"location":"CHANGELOG/#0310","title":"0.3.10","text":""},{"location":"CHANGELOG/#features_3","title":"Features","text":"<ul> <li>Support IntelliJ IDEA 2021.3 [#407]</li> </ul>"},{"location":"CHANGELOG/#bugfixes_1","title":"BugFixes","text":"<ul> <li>Fix a typo in the settings [#408]</li> </ul>"},{"location":"CHANGELOG/#039","title":"0.3.9","text":""},{"location":"CHANGELOG/#features_4","title":"Features","text":"<ul> <li>Support PyCharm 2021.3 [#400]</li> </ul>"},{"location":"CHANGELOG/#038","title":"0.3.8","text":""},{"location":"CHANGELOG/#features_5","title":"Features","text":"<ul> <li>PyCharm API changes [#350] by @alek-sun</li> <li>Thanks to @alek-sun</li> </ul>"},{"location":"CHANGELOG/#037","title":"0.3.7","text":""},{"location":"CHANGELOG/#bugfixes_2","title":"BugFixes","text":"<ul> <li>Improve resolving ancestor pydantic models [#369]</li> <li>Fix false positive detection of \"extra fields not permitted\" [#368]</li> </ul>"},{"location":"CHANGELOG/#036","title":"0.3.6","text":""},{"location":"CHANGELOG/#bugfixes_3","title":"BugFixes","text":"<ul> <li>Fix PydanticDataclassTypeProvider.kt error [#366]</li> <li>Fix Outdated Stub in index error on PydanticAnnotator.kt [#363]</li> <li>Fix NullPointerException in PydanticTypeCheckerInspection.kt [#362]</li> </ul>"},{"location":"CHANGELOG/#035","title":"0.3.5","text":""},{"location":"CHANGELOG/#features_6","title":"Features","text":"<ul> <li>Support PyCharm 2021.2 [#355]</li> <li>PyCharm 2021.2.1 API changes [#345] by @lada-gagina</li> <li>Thanks to @lada-gagina</li> </ul>"},{"location":"CHANGELOG/#034","title":"0.3.4","text":""},{"location":"CHANGELOG/#features_7","title":"Features","text":"<ul> <li>Support ignore-init-method-arguments [#328]</li> <li>Support error for extra attribute with extra = 'forbid' option [#324]</li> </ul>"},{"location":"CHANGELOG/#bugfixes_4","title":"BugFixes","text":"<ul> <li>Fix default value by variable for Field is not recognized [#323]</li> </ul>"},{"location":"CHANGELOG/#033","title":"0.3.3","text":""},{"location":"CHANGELOG/#bugfixes_5","title":"BugFixes","text":"<ul> <li>Ignore invalid alias name [#307]</li> <li>Fix wrong call parameter with **kwargs [#306]</li> </ul>"},{"location":"CHANGELOG/#032","title":"0.3.2","text":""},{"location":"CHANGELOG/#bugfixes_6","title":"BugFixes","text":"<ul> <li>Fix wrong call parameters when init is defined [#298]</li> <li>Fix wrong an error for a duplicate in config [#297]</li> </ul>"},{"location":"CHANGELOG/#031","title":"0.3.1","text":""},{"location":"CHANGELOG/#features_8","title":"Features","text":"<ul> <li>Improve resolving reference [#293]</li> <li>Improve coding style [#292]</li> <li>Support GenericModel [#289]</li> <li>Support frozen on config [#288]</li> <li>Fix format [#287]</li> <li>Improve handling pydantic version [#286]</li> <li>Support config parameters on class kwargs [#285]</li> </ul>"},{"location":"CHANGELOG/#030","title":"0.3.0","text":""},{"location":"CHANGELOG/#features_9","title":"Features","text":"<ul> <li>Support extra init args on baseSetting [#276]</li> <li>Support PyCharm 2021.1 [#273]</li> <li>Improve supporting dynamic model [#271]</li> </ul>"},{"location":"CHANGELOG/#021","title":"0.2.1","text":""},{"location":"CHANGELOG/#features_10","title":"Features","text":"<ul> <li>Support regex (Field, constr) [#262]</li> </ul>"},{"location":"CHANGELOG/#020","title":"0.2.0","text":""},{"location":"CHANGELOG/#bugfixes_7","title":"BugFixes","text":"<ul> <li>Support <code>import typing</code> [#258]</li> <li>Fix DisposalException [#252]</li> <li>Support Annotated [#241]</li> </ul>"},{"location":"CHANGELOG/#0120","title":"0.1.20","text":""},{"location":"CHANGELOG/#features_11","title":"Features","text":"<ul> <li>Show Field() as parameter info for a default value when set default_factory [#240]</li> </ul>"},{"location":"CHANGELOG/#0119","title":"0.1.19","text":""},{"location":"CHANGELOG/#bugfixes_8","title":"BugFixes","text":"<ul> <li>Fix custom root inspection [#232]</li> </ul>"},{"location":"CHANGELOG/#0118","title":"0.1.18","text":""},{"location":"CHANGELOG/#features_12","title":"Features","text":"<ul> <li>Support custom root field [#227]</li> </ul>"},{"location":"CHANGELOG/#0117","title":"0.1.17","text":""},{"location":"CHANGELOG/#features_13","title":"Features","text":"<ul> <li>Support keep_untouched[#216]</li> </ul>"},{"location":"CHANGELOG/#bugfixes_9","title":"BugFixes","text":"<ul> <li>Fix build warning [#217]</li> </ul>"},{"location":"CHANGELOG/#0116","title":"0.1.16","text":""},{"location":"CHANGELOG/#bugfixes_10","title":"BugFixes","text":"<ul> <li>Fix inserting argument [#204]</li> </ul>"},{"location":"CHANGELOG/#0115","title":"0.1.15","text":""},{"location":"CHANGELOG/#bugfixes_11","title":"BugFixes","text":"<ul> <li>Fix config service error [#202]</li> </ul>"},{"location":"CHANGELOG/#0114","title":"0.1.14","text":""},{"location":"CHANGELOG/#bugfixes_12","title":"BugFixes","text":"<ul> <li>Fix detecting validators decorated methods [#196]</li> <li>Remove stub deletion error [#190]</li> </ul>"},{"location":"CHANGELOG/#0113","title":"0.1.13","text":""},{"location":"CHANGELOG/#features_14","title":"Features","text":"<ul> <li>Support ClassVar [#188]</li> </ul>"},{"location":"CHANGELOG/#0112","title":"0.1.12","text":""},{"location":"CHANGELOG/#features_15","title":"Features","text":"<ul> <li>Improve build config [#180]</li> </ul>"},{"location":"CHANGELOG/#0111","title":"0.1.11","text":""},{"location":"CHANGELOG/#features_16","title":"Features","text":"<ul> <li>Support dynamic model [#175]</li> </ul>"},{"location":"CHANGELOG/#0110","title":"0.1.10","text":""},{"location":"CHANGELOG/#bugfixes_13","title":"BugFixes","text":"<ul> <li>Fix inserting arguments [#160]</li> </ul>"},{"location":"CHANGELOG/#019","title":"0.1.9","text":""},{"location":"CHANGELOG/#bugfixes_14","title":"BugFixes","text":"<ul> <li>Fix compatibility issues [#145]</li> </ul>"},{"location":"CHANGELOG/#018","title":"0.1.8","text":""},{"location":"CHANGELOG/#features_17","title":"Features","text":"<ul> <li>Support inserting arguments [#144]</li> </ul>"},{"location":"CHANGELOG/#017","title":"0.1.7","text":""},{"location":"CHANGELOG/#features_18","title":"Features","text":"<ul> <li>Update jvm version [#133]</li> </ul>"},{"location":"CHANGELOG/#bugfixes_15","title":"BugFixes","text":"<ul> <li>Fix handling project [#137]</li> <li>Fix invalid cache for pydantic version [#132]</li> <li>Fix invalid completion in callable expression [#130]</li> </ul>"},{"location":"CHANGELOG/#016","title":"0.1.6","text":""},{"location":"CHANGELOG/#features_19","title":"Features","text":"<ul> <li>Support conlist [#129]</li> <li>Fix acceptable types for collections [#127]</li> <li>Improve initializer and add package manager listener [#126]</li> <li>Fix invalid self parameter when inherits from non-pydantic model [#125]</li> <li>Add mock sdk for unittest [#124]</li> <li>Fix types of methods and functions [#123]</li> </ul>"},{"location":"CHANGELOG/#015","title":"0.1.5","text":""},{"location":"CHANGELOG/#features_20","title":"Features","text":"<ul> <li>Support a collection on parsable-type and acceptable-type [#120]</li> </ul>"},{"location":"CHANGELOG/#bugfixes_16","title":"BugFixes","text":"<ul> <li>Fix an error when project is disposed [#121]</li> <li>Fix type-map edge case for parsable-type and acceptable-type [#118]</li> </ul>"},{"location":"CHANGELOG/#014","title":"0.1.4","text":""},{"location":"CHANGELOG/#bugfixes_17","title":"BugFixes","text":"<ul> <li>Fix type provider for dataclass [#114]</li> </ul>"},{"location":"CHANGELOG/#features_21","title":"Features","text":"<ul> <li>Support mypy.ini [#110]</li> </ul>"},{"location":"CHANGELOG/#013","title":"0.1.3","text":""},{"location":"CHANGELOG/#features_22","title":"Features","text":"<ul> <li>Add documents and link to documents [#105, #106, #107, #108]</li> <li>Support acceptable type [#104]</li> <li>Support parsable type highlight level [#103]</li> </ul>"},{"location":"CHANGELOG/#012","title":"0.1.2","text":""},{"location":"CHANGELOG/#bugfixes_18","title":"BugFixes","text":"<ul> <li>Fix type checker [#102]</li> <li>Fix an invalid warning when a field type is any [#101]</li> <li>Fix plugin build settings [#100]</li> </ul>"},{"location":"CHANGELOG/#011","title":"0.1.1","text":""},{"location":"CHANGELOG/#features_23","title":"Features","text":"<ul> <li>Support parsable type [#96]</li> </ul>"},{"location":"CHANGELOG/#010","title":"0.1.0","text":""},{"location":"CHANGELOG/#features_24","title":"Features","text":"<ul> <li>PyCharm treats pydantic.dataclasses.dataclass as third-party dataclass. [#98]</li> </ul>"},{"location":"CHANGELOG/#0030","title":"0.0.30","text":""},{"location":"CHANGELOG/#bugfixes_19","title":"BugFixes","text":"<ul> <li>Fix invalid warn on no public attribute [#95]</li> </ul>"},{"location":"CHANGELOG/#0029","title":"0.0.29","text":""},{"location":"CHANGELOG/#features_25","title":"Features","text":"<ul> <li>Inspect untyped fields [#93]</li> <li>Add config panel [#92]</li> </ul>"},{"location":"CHANGELOG/#0028","title":"0.0.28","text":""},{"location":"CHANGELOG/#features-bugfixes","title":"Features, BugFixes","text":"<ul> <li>Support positional arguments for dataclasses [#91]</li> <li>Fix field names treated with incorrect scope [#90]</li> </ul>"},{"location":"CHANGELOG/#0027","title":"0.0.27","text":""},{"location":"CHANGELOG/#features_26","title":"Features","text":"<ul> <li>Support to inspect read-only property [#86]</li> </ul>"},{"location":"CHANGELOG/#0026","title":"0.0.26","text":""},{"location":"CHANGELOG/#features_27","title":"Features","text":"<ul> <li>Support to inspect from_orm [#85]</li> <li>Improve to handle Config  [#85]</li> </ul>"},{"location":"CHANGELOG/#0025","title":"0.0.25","text":""},{"location":"CHANGELOG/#features_28","title":"Features","text":"<ul> <li>Add auto-completion for config fields [#84]</li> <li>Support allow_population_by_field_name [#82]</li> </ul>"},{"location":"CHANGELOG/#0024","title":"0.0.24","text":""},{"location":"CHANGELOG/#bugfixes_20","title":"BugFixes","text":"<ul> <li>Fix inspection on namedtuple [#81]</li> </ul>"},{"location":"CHANGELOG/#0023","title":"0.0.23","text":""},{"location":"CHANGELOG/#features_29","title":"Features","text":"<ul> <li>Ignore protected and private fields [#79]</li> </ul>"},{"location":"CHANGELOG/#0022","title":"0.0.22","text":""},{"location":"CHANGELOG/#features-bugfixes_1","title":"Features, BugFixes","text":"<ul> <li>Fix first parameter type of a validator method [#76]</li> <li>Fix auto-completion for Fields [#75]</li> <li>Improve to insert validate methods [#74]</li> </ul>"},{"location":"CHANGELOG/#0021","title":"0.0.21","text":""},{"location":"CHANGELOG/#features-bugfixes_2","title":"Features, BugFixes","text":"<ul> <li>Support root_validator [#72]</li> <li>Support Field for v1 [#71, #73]</li> </ul>"},{"location":"CHANGELOG/#0020","title":"0.0.20","text":""},{"location":"CHANGELOG/#features-bugfixes_3","title":"Features, BugFixes","text":"<ul> <li>Support all features by parameters [#67]</li> <li>Fix to handle models which have init or new methods [#67]</li> </ul>"},{"location":"CHANGELOG/#0019","title":"0.0.19","text":""},{"location":"CHANGELOG/#bugfixes_21","title":"BugFixes","text":"<ul> <li>Fix wrong warning message for cls initialization [#66]</li> </ul>"},{"location":"CHANGELOG/#0018","title":"0.0.18","text":""},{"location":"CHANGELOG/#features_30","title":"Features","text":"<ul> <li>Support alias on Schema [#64]</li> </ul>"},{"location":"CHANGELOG/#0017","title":"0.0.17","text":""},{"location":"CHANGELOG/#bugfixes_22","title":"BugFixes","text":"<ul> <li>Fix removing fields on non-subclasses of pydantic.BaseModel and pydantic.dataclasses.dataclass [#62]</li> </ul>"},{"location":"CHANGELOG/#0016","title":"0.0.16","text":""},{"location":"CHANGELOG/#features-bugfixes_4","title":"Features, BugFixes","text":"<ul> <li>Remove fields on auto-completion of subclasses of pydantic.BaseModel and pydantic.dataclasses.dataclass [#61]</li> <li>Change default value \"...\" to None on auto-completion [#60]</li> <li>Add types and default values to popup of auto-completion [#54]</li> <li>Fix class imported path on auto-completion [#54]</li> </ul>"},{"location":"CHANGELOG/#0015","title":"0.0.15","text":""},{"location":"CHANGELOG/#features_31","title":"Features","text":"<ul> <li>Improve autocompletion for signature subclasses of pydantic.BaseModel and pydantic.dataclasses.dataclass [#51]</li> <li>Update kotlin version to 1.3.50  [#50]</li> <li>Support to detect types by default value on Schema [#49]</li> <li>Improve inner logic [#47, #52]</li> </ul>"},{"location":"CHANGELOG/#0014","title":"0.0.14","text":""},{"location":"CHANGELOG/#features_32","title":"Features","text":"<ul> <li>Support default values [#46]</li> <li>Ignore warning for self argument with @validator [#45]</li> <li>Support pydantic.dataclasses.dataclass [#43]</li> <li>Search related-fields by class attributes and keyword arguments of init. with Ctrl+B and Cmd+B [#42]</li> </ul>"},{"location":"CHANGELOG/#0013","title":"0.0.13","text":""},{"location":"CHANGELOG/#features-bugfixes_5","title":"Features, BugFixes","text":"<ul> <li>Fix to check a type of fields without a type-hint [#39]</li> <li>No arguments required for BaseSettings [#38]</li> </ul>"},{"location":"CHANGELOG/#0012","title":"0.0.12","text":""},{"location":"CHANGELOG/#features_33","title":"Features","text":"<ul> <li>Support refactoring fields by a keyword argument [#34]</li> <li>Support refactoring super-classes and inheritor-classes [#34]</li> <li>Support ellipsis(...) in fields [#34]</li> <li>Support Schema in fields [#31]</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#building-the-plugin","title":"Building the plugin","text":"<p>You can build and run the plugin either via the command line or through IntelliJ IDEA:</p>"},{"location":"development/#shell-on-linux-macos-and-powershell","title":"Shell on Linux, macOS and PowerShell","text":"<pre><code>./gradlew buildPlugin\n</code></pre>"},{"location":"development/#command-prompt-on-windows","title":"Command Prompt on Windows","text":"<pre><code>gradlew buildPlugin\n</code></pre>"},{"location":"development/#jetbrains-ide-on-any-platform","title":"JetBrains IDE on any platform","text":"<p>Official documentation</p>"},{"location":"development/#running-the-ide-with-the-built-plugin","title":"Running the IDE with the built plugin","text":"<pre><code>./gradlew runIde\n</code></pre>"},{"location":"development/#license-for-testsrccomjetbrains","title":"License For testSrc/com/jetbrains","text":"<p>These files are copied to <code>testSrc/com/jetbrains</code> from IntelliJ IDEA Community Edition The files are licensed under the Apache License, Version 2.0. http://www.apache.org/licenses/LICENSE-2.0</p>"},{"location":"ignore-init-arguments/","title":"Ignore <code>__init__</code> method arguments","text":"<p>Info</p> <p>This feature is in version 0.3.4 or later</p> <p>You can write <code>__init__</code> method on a model for adding some logic.</p> <p>However, default arguments on <code>__init__</code> method will be overridden, And you will lose autocompletion for <code>__init__</code> methods by the plugin.  </p> <p></p> <p><code>ignore-init-method-arguments</code> option resolves this problem. The option ignore arguments on <code>__init__</code> method.</p> <p></p> <p>The option has to be defined in pyproject.toml</p> <pre><code>[tool.pydantic-pycharm-plugin]\nignore-init-method-arguments = true\n</code></pre> <p>Info</p> <p>This feature is in version 0.4.9 or later</p> <p>If a third-party library provides a model that extends BaseModel, it may override the <code>__init__</code> method, as in <code>__init__(self, **kwargs)</code>. If this is the case, the plugin user should set <code>ignore-init-method-arguments = true</code> to ignore the <code>__init__</code> method argument. But it is difficult to tell if the library is using BaseModel or not.</p> <p>The plugin ignore the <code>__init__</code> method if argument is only <code>**kwargs</code>. the option is provided as <code>ignore-init-method-keyword-arguments</code>. This option is enabled by default, so if you create a model that inherits from BaseModel with a method like <code>__init__(self, **kwargs)</code> defined, ignore this <code>init</code> argument.</p> <p>If you want to disable this option, please put the following setting in <code>pyproject.toml</code>.</p> <pre><code>[tool.pydantic-pycharm-plugin].\nignore-init-method-keyword-arguments = true\n</code></pre>"},{"location":"ignore-init-keyword-arguments/","title":"Ignore <code>__init__</code> method arguments","text":"<p>Info</p> <p>This feature is in version 0.4.8 or later</p> <p>You can write <code>__init__</code> method on a model for adding some logic.</p> <p>However, default arguments on <code>__init__</code> method will be overridden, And you will lose autocompletion for <code>__init__</code> methods by the plugin.  </p> <p></p> <p><code>ignore-init-method-arguments</code> option resolves this problem. The option ignore arguments on <code>__init__</code> method.</p> <p></p> <p>The option has to be defined in pyproject.toml</p> <pre><code>[tool.pydantic-pycharm-plugin]\nignore-init-method-keyword-arguments = false\n</code></pre>"},{"location":"install/","title":"Installation","text":"<p>The plugin requires PyCharm 2020.2 or later (include other JetBrains IDEs)</p>"},{"location":"install/#marketplace","title":"MarketPlace","text":"<p>The plugin is in Jetbrains repository (Pydantic Plugin Page)</p> <p>You can install the stable version on PyCharm's <code>Marketplace</code> (Preference -&gt; Plugins -&gt; Marketplace) Official Documentation</p> <p></p>"},{"location":"install/#complied-binary","title":"Complied binary","text":"<p>The 'Releases' section of this repository contains a compiled version of the plugin: pydantic-pycharm-plugin.zip(latest)</p> <p>After downloading this file, you can install the plugin from disk by following the JetBrains instructions here.</p>"},{"location":"install/#source","title":"Source","text":"<p>Alternatively, you can clone this repository and follow the instructions under the \"Building the plugin\" heading below to build from source. The build process will create the file <code>build/distributions/pydantic-pycharm-plugin.zip</code>. This file can be installed as a PyCharm plugin from disk following the same instructions.</p>"},{"location":"mypy-compatible/","title":"Mypy Compatible","text":"<p>Info</p> <p>This feature is in version 0.1.4 or later</p> <p>This plugin is compatible with the pydantic-mypy plugin, which is included in pydantic package.</p> <p>If you set supported features in mypy.ini then, the pycharm plugin performs the same inspects.</p>"},{"location":"mypy-compatible/#support-features","title":"Support features","text":"<ul> <li>init_typed</li> <li>warn_untyped_fields</li> </ul>"},{"location":"mypy-compatible/#init_typed","title":"init_typed","text":"<p>If enabled, include the field types as type hints in the generated signature for the init method. This means that you'll get errors if you pass an argument that is not already the right type to init, even if parsing could safely convert the type.</p>"},{"location":"mypy-compatible/#warn_untyped_fields","title":"warn_untyped_fields","text":"<p>If enabled, raise an error whenever a field is declared on a model without explicitly specifying its type.</p>"},{"location":"mypy-compatible/#settings","title":"Settings","text":"<p>You can toggle these features in PyCharm's Settings.</p> <p></p> <p>Tips</p> <p>If there is mypy.ini in your project, this plugin use values in mypy.ini</p>"},{"location":"type-checker-for-pydantic/","title":"Type checker for Pydnatic","text":"<p>Warning</p> <p>Experimental feature</p> <p>Info</p> <p>In version 0.1.1, This feature is broken. Please use it in 0.1.2 or later. </p> <p>Tips</p> <p>**This plugin supports type-checking to pydantic with a built-in type checker.   Plus, this type-checker supplies a special feature to Pydnatic. **</p> <p>This plugin provides a type-checker for pydantic.</p> <p>You can use the type-checker on PyCharm's Settings (Preference -&gt; Editor -&gt; Inspections -&gt; <code>Type checker compatible with Pydantic</code>) </p> <p>This type-checker inherits from PyCharm's built-in type checker (aka <code>Type checker</code>).</p> <p>Please disable <code>Type checker</code> when you enable <code>Type checker compatible with Pydantic.</code></p> <p>Don't use this type checker with a builtin type checker same time.</p> <p></p>"},{"location":"type-checker-for-pydantic/#parsable-type","title":"Parsable Type","text":"<p>Pydantic has lots of support for coercing types. However, PyCharm  gives a message saying only <code>Expected type \"x,\" got \"y\" instead:</code> When you set parsable-type on a type, then the message will be changed to <code>Field is of type \"x\", \"y\" may not be parsable to \"x\"</code></p> <p></p>"},{"location":"type-checker-for-pydantic/#set-parsable-type-in-pyprojecttoml","title":"Set parsable-type in pyproject.toml","text":"<p>You should create <code>pyproject.toml</code> in your project root. And, you define parsable-type like a example.</p> <p>exapmle: <code>pyproject.toml</code></p> <pre><code>[tool.pydantic-pycharm-plugin.parsable-types]\n\n# str field may parse int and float\nstr = [\"int\", \"float\"]\n\n# datetime.datetime field may parse int\n\"datetime.datetime\" = [ \"int\" ]\n\n# your_module.your_type field may parse str\n\"your_module.your_type\" = [ \"str\" ]\n\n[tool.pydantic-pycharm-plugin]\n# You can set higlith level (default is \"warning\")\n# You can select it from \"warning\",  \"weak_warning\", \"disable\" \nparsable-type-highlight = \"warning\" \n\n## If you set acceptable-type-highlight then, you have to set it at same depth.\nacceptable-type-highlight = \"disable\" \n</code></pre>"},{"location":"type-checker-for-pydantic/#acceptable-type","title":"Acceptable Type","text":"<p>Info</p> <p>This feature is in version 0.1.3 or later.</p> <p>Pydantic can always parse a few types to other types. For example, <code>int</code> to <code>str</code>. It always succeeds. You can set it as an acceptable type. The message is <code>Field is of type 'x', 'y' is set as an acceptable type in pyproject.toml</code>. Also,You may want to disable the message.You can do it, by setting \"disable\" on <code>acceptable-type-highlight</code>.</p>"},{"location":"type-checker-for-pydantic/#set-acceptable-type-in-pyprojecttoml","title":"Set acceptable-type in pyproject.toml","text":"<p>You should create <code>pyproject.toml</code> in your project root. And, you define acceptable-type like a example.</p> <p>exapmle: <code>pyproject.toml</code></p> <pre><code>[tool.pydantic-pycharm-plugin.acceptable-types]\n\n# str field accepts to parse int and float\nstr = [\"int\", \"float\"]\n\n# datetime.datetime field may parse int\n\"datetime.datetime\" = [ \"int\" ]\n\n[tool.pydantic-pycharm-plugin]\n# You can set higlith level (default is \"weak_warning\")\n# You can select it from \"warning\",  \"weak_warning\", \"disable\" \nacceptable-type-highlight = \"disable\" \n\n# If you set parsable-type-highlight then, you have to set it at same depth.\nparsable-type-highlight = \"warning\" \n</code></pre>"}]}